{"version":3,"sources":["../../main.js"],"names":["Distance","require","ClusterInit","eudist","mandist","absdist","dist","kmrand","kmpp","MAX","fill","len","val","v","i","test","point","fndist","ks","centroids","k","length","min","Infinity","idx","j","centroid","skmeans","data","maxit","fixedclusters","map","x","some","it","idxs","old","conv","vlen","count","fixedcluster_inds","Set","sort","slice","fixedclusters_set","sum","vsum","vect","h","has","ksj","sumj","cj","oldj","module","exports"],"mappings":";;;;;;;;;;AAAA;AAEA,IACCA,QAAQ,GAAGC,OAAO,CAAC,eAAD,CADnB;AAAA,IAECC,WAAW,GAAGD,OAAO,CAAC,YAAD,CAFtB;AAAA,IAGCE,MAAM,GAAGH,QAAQ,CAACG,MAHnB;AAAA,IAICC,OAAO,GAAGJ,QAAQ,CAACI,OAJpB;AAAA,IAKCC,OAAO,GAAGL,QAAQ,CAACM,IALpB;AAAA,IAMCC,MAAM,GAAGL,WAAW,CAACK,MANtB;AAAA,IAOCC,IAAI,GAAGN,WAAW,CAACM,IAPpB;;AASA,IAAMC,GAAG,GAAG,KAAZ;AAEA;;;;AAGA,SAASC,IAAT,CAAcC,GAAd,EAAkBC,GAAlB,EAAsBC,CAAtB,EAAyB;AACxBA,EAAAA,CAAC,GAAGA,CAAC,IAAI,EAAT;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACH,GAAd,EAAkBG,CAAC,EAAnB;AAAuBD,IAAAA,CAAC,CAACC,CAAD,CAAD,GAAOF,GAAP;AAAvB;;AACA,SAAOC,CAAP;AACA;;AAED,SAASE,IAAT,CAAcC,KAAd,EAAqBC,MAArB,EAA6B;AAC5B,MACCC,EAAE,GAAG,KAAKC,SADX;AAAA,MAECC,CAAC,GAAGF,EAAE,CAACG,MAFR,CAD4B,CAK5B;;AACA,MAAIC,GAAG,GAAGC,QAAV;AAAA,MAAoBC,GAAG,GAAG,CAA1B;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACL,CAAd,EAAgBK,CAAC,EAAjB,EAAqB;AACpB;AACA,QAAInB,IAAI,GAAGW,MAAM,GAAEA,MAAM,CAACD,KAAD,EAAOE,EAAE,CAACO,CAAD,CAAT,CAAR,GAAwBtB,MAAM,CAACa,KAAD,EAAOE,EAAE,CAACO,CAAD,CAAT,CAA/C;;AAEA,QAAGnB,IAAI,IAAEgB,GAAT,EAAc;AACbA,MAAAA,GAAG,GAAGhB,IAAN;AACAkB,MAAAA,GAAG,GAAGC,CAAN;AACA;AACD;;AAED,SAAO;AACND,IAAAA,GAAG,EAAHA,GADM;AACDE,IAAAA,QAAQ,EAACR,EAAE,CAACM,GAAD;AADV,GAAP;AAGA;;AAED,SAASG,OAAT,CAAiBC,IAAjB,EAAsBR,CAAtB,EAAwBS,KAAxB,EAA8BC,aAA9B,EAA6C;AAC5C;AACA;AACA;AACA;AACA;AACA,MAAI,CAACA,aAAL,EAAoB;AACnBA,IAAAA,aAAa,GAAGF,IAAI,CAACG,GAAL,CAAS,UAAAC,CAAC;AAAA,aAAI,CAAC,CAAL;AAAA,KAAV,CAAhB;AACA;;AACD,MAAI,CAACF,aAAa,CAACG,IAAd,CAAmB,UAAAD,CAAC;AAAA,WAAIA,CAAC,KAAK,CAAC,CAAX;AAAA,GAApB,CAAL,EAAwC;AACvC,WAAO;AACNE,MAAAA,EAAE,EAAG,CADC;AAENd,MAAAA,CAAC,EAAGA,CAFE;AAGNe,MAAAA,IAAI,EAAGL,aAHD;AAINX,MAAAA,SAAS,EAAG,EAJN;AAIU;AAChBJ,MAAAA,IAAI,EAAGA;AALD,KAAP;AAOA;;AACD,MAAIa,IAAI,CAACP,MAAL,KAAgB,CAApB,EAAuB;AACtB,WAAO;AACNa,MAAAA,EAAE,EAAE,CADE;AAENd,MAAAA,CAAC,EAAEA,CAFG;AAGNe,MAAAA,IAAI,EAAE,CAAC,CAAD,CAHA;AAINhB,MAAAA,SAAS,EAAE,EAJL;AAKNJ,MAAAA,IAAI,EAAEA;AALA,KAAP;AAOA;;AACD,MAAIG,EAAE,GAAG,EAAT;AAAA,MAAakB,GAAG,GAAG,EAAnB;AAAA,MAAuBD,IAAI,GAAG,EAA9B;AAAA,MAAkC7B,IAAI,GAAG,EAAzC;AACA,MAAI+B,IAAI,GAAG,KAAX;AAAA,MAAkBH,EAAE,GAAGL,KAAK,IAAIpB,GAAhC;AACA,MAAIE,GAAG,GAAGiB,IAAI,CAACP,MAAf;AAAA,MAAuBiB,IAAI,GAAGV,IAAI,CAAC,CAAD,CAAJ,CAAQP,MAAtC;AACA,MAAIkB,KAAK,GAAG,EAAZ;;AAEA,OAAK,IAAId,CAAC,GAAC,CAAX,EAAaA,CAAC,GAACL,CAAf,EAAiBK,CAAC,EAAlB,EAAqB;AACpBP,IAAAA,EAAE,CAACO,CAAD,CAAF,GAAQ,EAAR;AACAc,IAAAA,KAAK,CAACd,CAAD,CAAL,GAAW,CAAX;AACA,GAnC2C,CAqC5C;;;AACA,MAAGK,aAAH,EAAkB;AAEjB;AACA,QAAIU,iBAAiB,GAAG,mBAAI,IAAIC,GAAJ,CAAQX,aAAR,CAAJ,EAA4BY,IAA5B,GAAmCC,KAAnC,CAAyC,CAAzC,CAAxB;;AACA,QAAIC,iBAAiB,GAAG,IAAIH,GAAJ,CAAQD,iBAAR,CAAxB,CAJiB,CAMjB;;AACA,QAAIK,GAAG,GAAG,EAAV;;AACA,SAAI,IAAIpB,EAAC,GAAC,CAAV,EAAYA,EAAC,GAACL,CAAd,EAAgBK,EAAC,EAAjB,EAAqB;AACnBoB,MAAAA,GAAG,CAACpB,EAAD,CAAH,GAASf,IAAI,CAAC4B,IAAD,EAAM,CAAN,EAAQO,GAAG,CAACpB,EAAD,CAAX,CAAb;AACD,KAVgB,CAYjB;;;AACA,SAAI,IAAIX,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACH,GAAd,EAAkBG,CAAC,EAAnB,EAAuB;AACtB,UAAIgB,aAAa,CAAChB,CAAD,CAAb,IAAoB,CAAC,CAAzB,EAA4B;AAC3B,YAAIU,GAAG,GAAGM,aAAa,CAAChB,CAAD,CAAvB;AAAA,YAA6B;AAC3BgC,QAAAA,IAAI,GAAGD,GAAG,CAACrB,GAAD,CADZ;AAAA,YACmB;AACjBuB,QAAAA,IAAI,GAAGnB,IAAI,CAACd,CAAD,CAFb,CAD2B,CAGR;AAEnB;;AACA,aAAI,IAAIkC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACV,IAAd,EAAmBU,CAAC,EAApB,EAAwB;AACvBF,UAAAA,IAAI,CAACE,CAAD,CAAJ,IAAWD,IAAI,CAACC,CAAD,CAAf;AACA;;AACDT,QAAAA,KAAK,CAACf,GAAD,CAAL;AACA;AACD,KAzBgB,CA0BjB;;;AACA,SAAI,IAAIC,GAAC,GAAC,CAAV,EAAYA,GAAC,GAACL,CAAd,EAAgBK,GAAC,EAAjB,EAAqB;AACpB,UAAImB,iBAAiB,CAACK,GAAlB,CAAsBxB,GAAtB,CAAJ,EAA8B;AAC7B,YAAIyB,GAAG,GAAGhC,EAAE,CAACO,GAAD,CAAZ;AAAA,YAAkB;AAChB0B,QAAAA,IAAI,GAAGN,GAAG,CAACpB,GAAD,CADZ;AAAA,YACiB;AACf2B,QAAAA,EAAE,GAAGb,KAAK,CAACd,GAAD,CAFZ,CAD6B,CAGZ;;AACjB,aAAI,IAAIuB,EAAC,GAAC,CAAV,EAAYA,EAAC,GAACV,IAAd,EAAmBU,EAAC,EAApB,EAAwB;AACvBE,UAAAA,GAAG,CAACF,EAAD,CAAH,GAAUG,IAAI,CAACH,EAAD,CAAL,GAAWI,EAAX,IAAkB,CAA3B,CADuB,CACO;AAC9B;AACD;AACD;AACD,GArCD,MAsCK;AACJ,QAAItB,aAAa,GAAGpB,IAAI,CAACC,GAAD,EAAM,CAAC,CAAP,CAAxB;AACA,QAAI6B,iBAAiB,GAAG,EAAxB;AACA,QAAII,iBAAiB,GAAG,IAAIH,GAAJ,EAAxB;AACA,GAhF2C,CAkF5C;;;AACAjC,EAAAA,IAAI,CAACoB,IAAD,EAAOR,CAAP,EAAUF,EAAV,CAAJ;;AAEA,KAAG;AACF;AACAR,IAAAA,IAAI,CAACU,CAAD,EAAG,CAAH,EAAKmB,KAAL,CAAJ,CAFE,CAIF;;AACA,SAAI,IAAIzB,EAAC,GAAC,CAAV,EAAYA,EAAC,GAACH,GAAd,EAAkBG,EAAC,EAAnB,EAAuB;AACtB,UAAIQ,GAAG,GAAGC,QAAV;AAAA,UAAoBC,IAAG,GAAG,CAA1B;;AACA,UAAIM,aAAa,CAAChB,EAAD,CAAb,IAAoB,CAAC,CAAzB,EAA4B;AAAE;AAC7B,aAAI,IAAIW,GAAC,GAAC,CAAV,EAAYA,GAAC,GAACL,CAAd,EAAgBK,GAAC,EAAjB,EAAqB;AACpB,cAAInB,IAAI,GAAGH,MAAM,CAACyB,IAAI,CAACd,EAAD,CAAL,EAASI,EAAE,CAACO,GAAD,CAAX,CAAjB;;AAEA,cAAGnB,IAAI,IAAEgB,GAAT,EAAc;AACbA,YAAAA,GAAG,GAAGhB,IAAN;AACAkB,YAAAA,IAAG,GAAGC,GAAN;AACA;AACD;AACD,OATD,MAUK;AACJD,QAAAA,IAAG,GAAGM,aAAa,CAAChB,EAAD,CAAnB;AACA;;AACDqB,MAAAA,IAAI,CAACrB,EAAD,CAAJ,GAAUU,IAAV,CAfsB,CAeP;;AACfe,MAAAA,KAAK,CAACf,IAAD,CAAL,GAhBsB,CAgBP;AACf,KAtBC,CAwBF;;;AACA,QAAIqB,GAAG,GAAG,EAAV;AAAA,QAAcT,GAAG,GAAG,EAApB;;AACA,SAAI,IAAIX,GAAC,GAAC,CAAV,EAAYA,GAAC,GAACL,CAAd,EAAgBK,GAAC,EAAjB,EAAqB;AACnBoB,MAAAA,GAAG,CAACpB,GAAD,CAAH,GAASf,IAAI,CAAC4B,IAAD,EAAM,CAAN,EAAQO,GAAG,CAACpB,GAAD,CAAX,CAAb;AACAW,MAAAA,GAAG,CAACX,GAAD,CAAH,GAASP,EAAE,CAACO,GAAD,CAAX;AACD;;AAED,SAAI,IAAIA,GAAC,GAAC,CAAV,EAAYA,GAAC,GAACL,CAAd,EAAgBK,GAAC,EAAjB,EAAqB;AACpB,UAAI,CAACmB,iBAAiB,CAACK,GAAlB,CAAsBxB,GAAtB,CAAL,EAA+B;AAC9BP,QAAAA,EAAE,CAACO,GAAD,CAAF,GAAQ,EAAR;AACA;AACD,KAnCC,CAqCF;;;AACA,SAAI,IAAIX,GAAC,GAAC,CAAV,EAAYA,GAAC,GAACH,GAAd,EAAkBG,GAAC,EAAnB,EAAuB;AACtB,UAAIU,KAAG,GAAGW,IAAI,CAACrB,GAAD,CAAd;AAAA,UAAoB;AAClBgC,MAAAA,KAAI,GAAGD,GAAG,CAACrB,KAAD,CADZ;AAAA,UACmB;AACjBuB,MAAAA,KAAI,GAAGnB,IAAI,CAACd,GAAD,CAFb,CADsB,CAGH;AAEnB;;AACA,WAAI,IAAIkC,GAAC,GAAC,CAAV,EAAYA,GAAC,GAACV,IAAd,EAAmBU,GAAC,EAApB,EAAwB;AACvBF,QAAAA,KAAI,CAACE,GAAD,CAAJ,IAAWD,KAAI,CAACC,GAAD,CAAf;AACA;AACD,KA/CC,CAiDF;;;AACAX,IAAAA,IAAI,GAAG,IAAP;;AACA,SAAI,IAAIZ,GAAC,GAAC,CAAV,EAAYA,GAAC,GAACL,CAAd,EAAgBK,GAAC,EAAjB,EAAqB;AACpB,UAAI,CAACmB,iBAAiB,CAACK,GAAlB,CAAsBxB,GAAtB,CAAL,EAA+B;AAC9B,YAAIyB,IAAG,GAAGhC,EAAE,CAACO,GAAD,CAAZ;AAAA,YAAkB;AAChB0B,QAAAA,KAAI,GAAGN,GAAG,CAACpB,GAAD,CADZ;AAAA,YACiB;AACf4B,QAAAA,IAAI,GAAGjB,GAAG,CAACX,GAAD,CAFZ;AAAA,YAEkB;AAChB2B,QAAAA,GAAE,GAAGb,KAAK,CAACd,GAAD,CAHZ,CAD8B,CAIb;AACjB;;AACA,aAAI,IAAIuB,GAAC,GAAC,CAAV,EAAYA,GAAC,GAACV,IAAd,EAAmBU,GAAC,EAApB,EAAwB;AACvBE,UAAAA,IAAG,CAACF,GAAD,CAAH,GAAUG,KAAI,CAACH,GAAD,CAAL,GAAWI,GAAX,IAAkB,CAA3B,CADuB,CACO;AAC9B,SAR6B,CAS9B;;;AACA,YAAGf,IAAH,EAAS;AACR,eAAI,IAAIW,GAAC,GAAC,CAAV,EAAYA,GAAC,GAACV,IAAd,EAAmBU,GAAC,EAApB,EAAwB;AACvB,gBAAGK,IAAI,CAACL,GAAD,CAAJ,IAASE,IAAG,CAACF,GAAD,CAAf,EAAoB;AACnBX,cAAAA,IAAI,GAAG,KAAP;AACA;AACA;AACD;AACD;AACD;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,IAAK,EAAEH,EAAF,IAAM,CAAtB;AACA,GAzED,QAyEQ,CAACG,IAzET;;AA2EA,SAAO;AACNH,IAAAA,EAAE,EAAG,CAACL,KAAK,IAAIpB,GAAV,IAAiByB,EADhB;AAENd,IAAAA,CAAC,EAAGA,CAFE;AAGNe,IAAAA,IAAI,EAAGA,IAHD;AAINhB,IAAAA,SAAS,EAAGD,EAJN;AAKNH,IAAAA,IAAI,EAAGA;AALD,GAAP;AAOA;;AAEDuC,MAAM,CAACC,OAAP,GAAiB5B,OAAjB","sourcesContent":["/*jshint esversion: 6 */\n\nconst\n\tDistance = require(\"./distance.js\"),\n\tClusterInit = require(\"./kinit.js\"),\n\teudist = Distance.eudist,\n\tmandist = Distance.mandist,\n\tabsdist = Distance.dist,\n\tkmrand = ClusterInit.kmrand,\n\tkmpp = ClusterInit.kmpp;\n\nconst MAX = 10000;\n\n/**\n * Inits an array with values\n */\nfunction fill(len,val,v) {\n\tv = v || [];\n\tfor(let i=0;i<len;i++) v[i] = val;\n\treturn v;\n}\n\nfunction test(point, fndist) {\n\tlet\n\t\tks = this.centroids,\n\t\tk = ks.length;\n\n\t// For each value in data, find the nearest centroid\n\tlet min = Infinity, idx = 0;\n\tfor(let j=0;j<k;j++) {\n\t\t// Custom, Multidimensional or unidimensional\n\t\tlet dist =\tfndist? fndist(point,ks[j]) : eudist(point,ks[j])\n\n\t\tif(dist<=min) {\n\t\t\tmin = dist;\n\t\t\tidx = j;\n\t\t}\n\t}\n\n\treturn {\n\t\tidx, centroid:ks[idx]\n\t}\n}\n\nfunction skmeans(data,k,maxit,fixedclusters) {\n\t// fixedclusters looks like [0, 1, 0, 0, -1, -1, -1], e.g.,\n\t// to indicate that 0, 2, 3 should stay clustered and\n\t// 1 should stay clustered and the last three data points\n\t// should go in some cluster, either one of the first two\n\t// or a new one\n\tif (!fixedclusters) {\n\t\tfixedclusters = data.map(x => -1);\n\t}\n\tif (!fixedclusters.some(x => x === -1)) {\n\t\treturn {\n\t\t\tit : 0,\n\t\t\tk : k,\n\t\t\tidxs : fixedclusters,\n\t\t\tcentroids : [], // skip the computation of centroids\n\t\t\ttest : test\n\t\t};\n\t}\n\tif (data.length === 1) {\n\t\treturn {\n\t\t\tit: 0,\n\t\t\tk: k,\n\t\t\tidxs: [0],\n\t\t\tcentroids: [],\n\t\t\ttest: test,\n\t\t}\n\t}\n\tvar ks = [], old = [], idxs = [], dist = [];\n\tvar conv = false, it = maxit || MAX;\n\tvar len = data.length, vlen = data[0].length;\n\tvar count = [];\n\n\tfor (let j=0;j<k;j++){\n\t\tks[j] = [];\n\t\tcount[j] = 0;\n\t}\n\n\t// fix centers based on pre-specified clusters\n\tif(fixedclusters) {\n\n\t\t// determine which clusters are fixed:\n\t\tvar fixedcluster_inds = [...new Set(fixedclusters)].sort().slice(1);\n\t\tvar fixedclusters_set = new Set(fixedcluster_inds);\n\n\t\t// set up zero vectors to store means\n\t\tvar sum = [];\n\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tsum[j] = fill(vlen,0,sum[j]);\n\t\t}\n\n\t\t// Sum, values, and count for each centroid\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tif (fixedclusters[i] != -1) {\n\t\t\t\tlet\tidx = fixedclusters[i],\t\t// Centroid for that item\n\t\t\t\t\t\tvsum = sum[idx],\t// Sum values for this centroid\n\t\t\t\t\t\tvect = data[i];\t\t// Current vector\n\n\t\t\t\t// Accumulate value on the centroid for current vector\n\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\tvsum[h] += vect[h];\n\t\t\t\t}\n\t\t\t\tcount[idx]++;\n\t\t\t}\n\t\t}\n\t\t// Calculate the average for each centroid\n\t\tfor(let j=0;j<k;j++) {\n\t\t\tif (fixedclusters_set.has(j)) {\n\t\t\t\tlet ksj = ks[j],\t\t// Current centroid\n\t\t\t\t\t\tsumj = sum[j],\t// Accumulated centroid values\n\t\t\t\t\t\tcj = count[j];\t// Number of elements for this centroid\n\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\tksj[h] = (sumj[h])/(cj) || 0;\t// centroid\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tvar fixedclusters = fill(len, -1);\n\t\tvar fixedcluster_inds = [];\n\t\tvar fixedclusters_set = new Set();\n\t}\n\n\t// Choose initial points for the free clusters in a smart way\n\tkmpp(data, k, ks);\n\n\tdo {\n\t\t// Reset count\n\t\tfill(k,0,count);\n\n\t\t// For each non-fixed value in data, find the nearest centroid\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tlet min = Infinity, idx = 0;\n\t\t\tif (fixedclusters[i] == -1) { // -1 indicates a non-fixed point\n\t\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\t\tvar dist = eudist(data[i],ks[j]);\n\n\t\t\t\t\tif(dist<=min) {\n\t\t\t\t\t\tmin = dist;\n\t\t\t\t\t\tidx = j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tidx = fixedclusters[i];\n\t\t\t}\n\t\t\tidxs[i] = idx;\t// Index of the selected centroid for that value\n\t\t\tcount[idx]++;\t\t// Number of values for this centroid\n\t\t}\n\n\t\t// Recalculate centroids\n\t\tvar sum = [], old = [];\n\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tsum[j] = fill(vlen,0,sum[j]);\n\t\t\t\told[j] = ks[j];\n\t\t}\n\n\t\tfor(let j=0;j<k;j++) {\n\t\t\tif (!fixedclusters_set.has(j)) {\n\t\t\t\tks[j] = [];\n\t\t\t}\n\t\t}\n\n\t\t// Sum values and count for each centroid\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tlet\tidx = idxs[i],\t\t// Centroid for that item\n\t\t\t\t\tvsum = sum[idx],\t// Sum values for this centroid\n\t\t\t\t\tvect = data[i];\t\t// Current vector\n\n\t\t\t// Accumulate value on the centroid for current vector\n\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\tvsum[h] += vect[h];\n\t\t\t}\n\t\t}\n\n\t\t// Calculate the average for each centroid\n\t\tconv = true;\n\t\tfor(let j=0;j<k;j++) {\n\t\t\tif (!fixedclusters_set.has(j)) {\n\t\t\t\tlet ksj = ks[j],\t\t// Current centroid\n\t\t\t\t\t\tsumj = sum[j],\t// Accumulated centroid values\n\t\t\t\t\t\toldj = old[j], \t// Old centroid value\n\t\t\t\t\t\tcj = count[j];\t// Number of elements for this centroid\n\t\t\t\t// New average\n\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\tksj[h] = (sumj[h])/(cj) || 0;\t// New centroid\n\t\t\t\t}\n\t\t\t\t// Determine whether centroids have moved\n\t\t\t\tif(conv) {\n\t\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\t\tif(oldj[h]!=ksj[h]) {\n\t\t\t\t\t\t\tconv = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconv = conv || (--it<=0);\n\t} while(!conv);\n\n\treturn {\n\t\tit : (maxit || MAX) - it,\n\t\tk : k,\n\t\tidxs : idxs,\n\t\tcentroids : ks,\n\t\ttest : test\n\t};\n}\n\nmodule.exports = skmeans;\n"],"file":"main.js"}
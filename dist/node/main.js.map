{"version":3,"sources":["../../main.js"],"names":["Distance","require","ClusterInit","eudist","mandist","absdist","dist","kmrand","kmpp","MAX","init","len","val","v","i","test","point","fndist","multi","Array","isArray","ks","centroids","k","length","min","Infinity","idx","j","Math","abs","centroid","skmeans","data","initial","maxit","fixedclusters","old","idxs","conv","it","vlen","count","z","floor","random","fixedcluster_inds","Set","sort","slice","fixedclusters_set","sum","vsum","vect","h","has","ksj","sumj","oldj","cj","dif","module","exports"],"mappings":";;;;;;;;;;AAAA;AAEA,IACCA,QAAQ,GAAGC,OAAO,CAAC,eAAD,CADnB;AAAA,IAECC,WAAW,GAAGD,OAAO,CAAC,YAAD,CAFtB;AAAA,IAGCE,MAAM,GAAGH,QAAQ,CAACG,MAHnB;AAAA,IAICC,OAAO,GAAGJ,QAAQ,CAACI,OAJpB;AAAA,IAKCC,OAAO,GAAGL,QAAQ,CAACM,IALpB;AAAA,IAMCC,MAAM,GAAGL,WAAW,CAACK,MANtB;AAAA,IAOCC,IAAI,GAAGN,WAAW,CAACM,IAPpB;;AASA,IAAMC,GAAG,GAAG,KAAZ;AAEA;;;;AAGA,SAASC,IAAT,CAAcC,GAAd,EAAkBC,GAAlB,EAAsBC,CAAtB,EAAyB;AACxBA,EAAAA,CAAC,GAAGA,CAAC,IAAI,EAAT;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACH,GAAd,EAAkBG,CAAC,EAAnB;AAAuBD,IAAAA,CAAC,CAACC,CAAD,CAAD,GAAOF,GAAP;AAAvB;;AACA,SAAOC,CAAP;AACA;;AAED,SAASE,IAAT,CAAcC,KAAd,EAAqBC,MAArB,EAA6B;AAC5B,MACCC,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcJ,KAAd,CADT;AAAA,MAECK,EAAE,GAAG,KAAKC,SAFX;AAAA,MAGCC,CAAC,GAAGF,EAAE,CAACG,MAHR,CAD4B,CAM5B;;AACA,MAAIC,GAAG,GAAGC,QAAV;AAAA,MAAoBC,GAAG,GAAG,CAA1B;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACL,CAAd,EAAgBK,CAAC,EAAjB,EAAqB;AACpB;AACA,QAAItB,IAAI,GAAGW,MAAM,GAAEA,MAAM,CAACD,KAAD,EAAOK,EAAE,CAACO,CAAD,CAAT,CAAR,GACXV,KAAK,GAAEf,MAAM,CAACa,KAAD,EAAOK,EAAE,CAACO,CAAD,CAAT,CAAR,GACLC,IAAI,CAACC,GAAL,CAASd,KAAK,GAACK,EAAE,CAACO,CAAD,CAAjB,CAFN;;AAIA,QAAGtB,IAAI,IAAEmB,GAAT,EAAc;AACbA,MAAAA,GAAG,GAAGnB,IAAN;AACAqB,MAAAA,GAAG,GAAGC,CAAN;AACA;AACD;;AAED,SAAO;AACND,IAAAA,GAAG,EAAHA,GADM;AACDI,IAAAA,QAAQ,EAACV,EAAE,CAACM,GAAD;AADV,GAAP;AAGA;;AAED,SAASK,OAAT,CAAiBC,IAAjB,EAAsBV,CAAtB,EAAwBW,OAAxB,EAAgCC,KAAhC,EAAsClB,MAAtC,EAA6CmB,aAA7C,EAA4D;AAC3D;AACA;AACA;AACA;AACA;AACA,MAAIf,EAAE,GAAG,EAAT;AAAA,MAAagB,GAAG,GAAG,EAAnB;AAAA,MAAuBC,IAAI,GAAG,EAA9B;AAAA,MAAkChC,IAAI,GAAG,EAAzC;AACA,MAAIiC,IAAI,GAAG,KAAX;AAAA,MAAkBC,EAAE,GAAGL,KAAK,IAAI1B,GAAhC;AACA,MAAIE,GAAG,GAAGsB,IAAI,CAACT,MAAf;AAAA,MAAuBiB,IAAI,GAAGR,IAAI,CAAC,CAAD,CAAJ,CAAQT,MAAtC;AACA,MAAIkB,KAAK,GAAG,EAAZ;;AAEA,MAAG,CAACR,OAAJ,EAAa;AACZ,QAAII,KAAI,GAAG,EAAX;AAAA,QAAeK,CAAC,GAAC,CAAjB;;AACA,WAAMtB,EAAE,CAACG,MAAH,GAAUD,CAAhB,EAAmB;AAClB,UAAII,GAAG,GAAGE,IAAI,CAACe,KAAL,CAAWf,IAAI,CAACgB,MAAL,KAAclC,GAAzB,CAAV;;AACA,UAAG,CAAC2B,KAAI,CAACX,GAAD,CAAR,EAAe;AACdW,QAAAA,KAAI,CAACX,GAAD,CAAJ,GAAY,IAAZ;AACAN,QAAAA,EAAE,CAACsB,CAAC,EAAF,CAAF,GAAUV,IAAI,CAACN,GAAD,CAAd;AACA;AACD;AACD,GATD,MAUK,IAAGO,OAAO,IAAE,QAAZ,EAAsB;AAC1Bb,IAAAA,EAAE,GAAGd,MAAM,CAAC0B,IAAD,EAAMV,CAAN,CAAX;AACA,GAFI,MAGA,IAAGW,OAAO,IAAE,MAAZ,EAAoB;AACxBb,IAAAA,EAAE,GAAGb,IAAI,CAACyB,IAAD,EAAMV,CAAN,EAAQN,MAAR,CAAT;AACA,GAFI,MAGA;AACJI,IAAAA,EAAE,GAAGa,OAAL;AACA,GA7B0D,CA+B3D;;;AACA,MAAGE,aAAH,EAAkB;AACjB;AACA,SAAI,IAAItB,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACH,GAAd,EAAkBG,CAAC,EAAnB,EAAuB;AACtB,UAAIsB,aAAa,CAACtB,CAAD,CAAb,IAAoB,CAAC,CAAzB,EAA4B;AAC3BwB,QAAAA,IAAI,CAACxB,CAAD,CAAJ,GAAUsB,aAAa,CAACtB,CAAD,CAAvB;AACA;AACD,KANgB,CAQjB;;;AACA,QAAIgC,iBAAiB,GAAG,mBAAI,IAAIC,GAAJ,CAAQX,aAAR,CAAJ,EAA4BY,IAA5B,GAAmCC,KAAnC,CAAyC,CAAzC,CAAxB;;AACA,QAAIC,iBAAiB,GAAG,IAAIH,GAAJ,CAAQD,iBAAR,CAAxB,CAViB,CAYjB;;AACA,QAAIK,GAAG,GAAG,EAAV;;AACA,SAAI,IAAIvB,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACL,CAAd,EAAgBK,CAAC,EAAjB,EAAqB;AACnBuB,MAAAA,GAAG,CAACvB,CAAD,CAAH,GAASlB,IAAI,CAAC+B,IAAD,EAAM,CAAN,EAAQU,GAAG,CAACvB,CAAD,CAAX,CAAb;AACD,KAhBgB,CAkBjB;;;AACA,SAAI,IAAId,EAAC,GAAC,CAAV,EAAYA,EAAC,GAACH,GAAd,EAAkBG,EAAC,EAAnB,EAAuB;AACtB,UAAIsB,aAAa,CAACtB,EAAD,CAAb,IAAoB,CAAC,CAAzB,EAA4B;AAC3B,YAAIa,IAAG,GAAGS,aAAa,CAACtB,EAAD,CAAvB;AAAA,YAA6B;AAC3BsC,QAAAA,IAAI,GAAGD,GAAG,CAACxB,IAAD,CADZ;AAAA,YACmB;AACjB0B,QAAAA,IAAI,GAAGpB,IAAI,CAACnB,EAAD,CAFb,CAD2B,CAGR;AAEnB;;AACA,aAAI,IAAIwC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACb,IAAd,EAAmBa,CAAC,EAApB,EAAwB;AACvBF,UAAAA,IAAI,CAACE,CAAD,CAAJ,IAAWD,IAAI,CAACC,CAAD,CAAf;AACA;AACD;AACD,KA9BgB,CA+BjB;;;AACAf,IAAAA,IAAI,GAAG,IAAP;;AACA,SAAI,IAAIX,EAAC,GAAC,CAAV,EAAYA,EAAC,GAACL,CAAd,EAAgBK,EAAC,EAAjB,EAAqB;AACpB,UAAIsB,iBAAiB,CAACK,GAAlB,CAAsB3B,EAAtB,CAAJ,EAA8B;AAC7B,YAAI4B,GAAG,GAAGnC,EAAE,CAACO,EAAD,CAAZ;AAAA,YAAkB;AAChB6B,QAAAA,IAAI,GAAGN,GAAG,CAACvB,EAAD,CADZ;AAAA,YACiB;AACf8B,QAAAA,IAAI,GAAGrB,GAAG,CAACT,EAAD,CAFZ;AAAA,YAEkB;AAChB+B,QAAAA,EAAE,GAAGjB,KAAK,CAACd,EAAD,CAHZ,CAD6B,CAIZ;;AACjB,aAAI,IAAI0B,EAAC,GAAC,CAAV,EAAYA,EAAC,GAACb,IAAd,EAAmBa,EAAC,EAApB,EAAwB;AACvBE,UAAAA,GAAG,CAACF,EAAD,CAAH,GAAUG,IAAI,CAACH,EAAD,CAAL,GAAWK,EAAX,IAAkB,CAA3B,CADuB,CACO;AAC9B;AACD;AACD;AACD,GA5CD,MA6CK;AACJ,QAAIvB,aAAa,GAAG1B,IAAI,CAACC,GAAD,EAAM,CAAC,CAAP,CAAxB;AACA,QAAImC,iBAAiB,GAAG,EAAxB;AACA,QAAII,iBAAiB,GAAG,IAAIH,GAAJ,EAAxB;AACA;;AAED,KAAG;AACF;AACArC,IAAAA,IAAI,CAACa,CAAD,EAAG,CAAH,EAAKmB,KAAL,CAAJ,CAFE,CAIF;;AACA,SAAI,IAAI5B,GAAC,GAAC,CAAV,EAAYA,GAAC,GAACH,GAAd,EAAkBG,GAAC,EAAnB,EAAuB;AACtB,UAAIW,GAAG,GAAGC,QAAV;AAAA,UAAoBC,KAAG,GAAG,CAA1B;;AACA,UAAIS,aAAa,CAACtB,GAAD,CAAb,IAAoB,CAAC,CAAzB,EAA4B;AAAE;AAC7B,aAAI,IAAIc,GAAC,GAAC,CAAV,EAAYA,GAAC,GAACL,CAAd,EAAgBK,GAAC,EAAjB,EAAqB;AACpB,cAAItB,IAAI,GAAGW,MAAM,GAAGA,MAAM,CAACgB,IAAI,CAACnB,GAAD,CAAL,EAASO,EAAE,CAACO,GAAD,CAAX,CAAT,GAA2BzB,MAAM,CAAC8B,IAAI,CAACnB,GAAD,CAAL,EAASO,EAAE,CAACO,GAAD,CAAX,CAAlD;;AAEA,cAAGtB,IAAI,IAAEmB,GAAT,EAAc;AACbA,YAAAA,GAAG,GAAGnB,IAAN;AACAqB,YAAAA,KAAG,GAAGC,GAAN;AACA;AACD;AACD,OATD,MAUK;AACJD,QAAAA,KAAG,GAAGS,aAAa,CAACtB,GAAD,CAAnB;AACA;;AACDwB,MAAAA,IAAI,CAACxB,GAAD,CAAJ,GAAUa,KAAV,CAfsB,CAeP;;AACfe,MAAAA,KAAK,CAACf,KAAD,CAAL,GAhBsB,CAgBP;AACf,KAtBC,CAwBF;;;AACA,QAAIwB,GAAG,GAAG,EAAV;AAAA,QAAcd,GAAG,GAAG,EAApB;AAAA,QAAwBuB,GAAG,GAAG,CAA9B;;AACA,SAAI,IAAIhC,GAAC,GAAC,CAAV,EAAYA,GAAC,GAACL,CAAd,EAAgBK,GAAC,EAAjB,EAAqB;AACnBuB,MAAAA,GAAG,CAACvB,GAAD,CAAH,GAASlB,IAAI,CAAC+B,IAAD,EAAM,CAAN,EAAQU,GAAG,CAACvB,GAAD,CAAX,CAAb;AACAS,MAAAA,GAAG,CAACT,GAAD,CAAH,GAASP,EAAE,CAACO,GAAD,CAAX;AACD;;AAED,SAAI,IAAIA,GAAC,GAAC,CAAV,EAAYA,GAAC,GAACL,CAAd,EAAgBK,GAAC,EAAjB,EAAqB;AACpB,UAAI,CAACsB,iBAAiB,CAACK,GAAlB,CAAsB3B,GAAtB,CAAL,EAA+B;AAC9BP,QAAAA,EAAE,CAACO,GAAD,CAAF,GAAQ,EAAR;AACA;AACD,KAnCC,CAqCF;;;AACA,SAAI,IAAId,GAAC,GAAC,CAAV,EAAYA,GAAC,GAACH,GAAd,EAAkBG,GAAC,EAAnB,EAAuB;AACtB,UAAIa,KAAG,GAAGW,IAAI,CAACxB,GAAD,CAAd;AAAA,UAAoB;AAClBsC,MAAAA,KAAI,GAAGD,GAAG,CAACxB,KAAD,CADZ;AAAA,UACmB;AACjB0B,MAAAA,KAAI,GAAGpB,IAAI,CAACnB,GAAD,CAFb,CADsB,CAGH;AAEnB;;AACA,WAAI,IAAIwC,GAAC,GAAC,CAAV,EAAYA,GAAC,GAACb,IAAd,EAAmBa,GAAC,EAApB,EAAwB;AACvBF,QAAAA,KAAI,CAACE,GAAD,CAAJ,IAAWD,KAAI,CAACC,GAAD,CAAf;AACA;AACD,KA/CC,CAgDF;;;AACAf,IAAAA,IAAI,GAAG,IAAP;;AACA,SAAI,IAAIX,GAAC,GAAC,CAAV,EAAYA,GAAC,GAACL,CAAd,EAAgBK,GAAC,EAAjB,EAAqB;AACpB,UAAI4B,IAAG,GAAGnC,EAAE,CAACO,GAAD,CAAZ;AAAA,UAAkB;AAChB6B,MAAAA,KAAI,GAAGN,GAAG,CAACvB,GAAD,CADZ;AAAA,UACiB;AACf8B,MAAAA,KAAI,GAAGrB,GAAG,CAACT,GAAD,CAFZ;AAAA,UAEkB;AAChB+B,MAAAA,GAAE,GAAGjB,KAAK,CAACd,GAAD,CAHZ,CADoB,CAIH;AAEjB;;AACA,WAAI,IAAI0B,GAAC,GAAC,CAAV,EAAYA,GAAC,GAACb,IAAd,EAAmBa,GAAC,EAApB,EAAwB;AACvBE,QAAAA,IAAG,CAACF,GAAD,CAAH,GAAUG,KAAI,CAACH,GAAD,CAAL,GAAWK,GAAX,IAAkB,CAA3B,CADuB,CACO;AAC9B,OATmB,CAWpB;;;AACA,UAAGpB,IAAH,EAAS;AACR,aAAI,IAAIe,GAAC,GAAC,CAAV,EAAYA,GAAC,GAACb,IAAd,EAAmBa,GAAC,EAApB,EAAwB;AACvB,cAAGI,KAAI,CAACJ,GAAD,CAAJ,IAASE,IAAG,CAACF,GAAD,CAAf,EAAoB;AACnBf,YAAAA,IAAI,GAAG,KAAP;AACA;AACA;AACD;AACD;AACD;;AAEDA,IAAAA,IAAI,GAAGA,IAAI,IAAK,EAAEC,EAAF,IAAM,CAAtB;AACA,GAzED,QAyEQ,CAACD,IAzET;;AA2EA,SAAO;AACNC,IAAAA,EAAE,EAAG,CAACL,KAAK,IAAI1B,GAAV,IAAiB+B,EADhB;AAENjB,IAAAA,CAAC,EAAGA,CAFE;AAGNe,IAAAA,IAAI,EAAGA,IAHD;AAINhB,IAAAA,SAAS,EAAGD,EAJN;AAKNN,IAAAA,IAAI,EAAGA;AALD,GAAP;AAOA;;AAED8C,MAAM,CAACC,OAAP,GAAiB9B,OAAjB","sourcesContent":["/*jshint esversion: 6 */\n\nconst\n\tDistance = require(\"./distance.js\"),\n\tClusterInit = require(\"./kinit.js\"),\n\teudist = Distance.eudist,\n\tmandist = Distance.mandist,\n\tabsdist = Distance.dist,\n\tkmrand = ClusterInit.kmrand,\n\tkmpp = ClusterInit.kmpp;\n\nconst MAX = 10000;\n\n/**\n * Inits an array with values\n */\nfunction init(len,val,v) {\n\tv = v || [];\n\tfor(let i=0;i<len;i++) v[i] = val;\n\treturn v;\n}\n\nfunction test(point, fndist) {\n\tlet\n\t\tmulti = Array.isArray(point),\n\t\tks = this.centroids,\n\t\tk = ks.length;\n\n\t// For each value in data, find the nearest centroid\n\tlet min = Infinity, idx = 0;\n\tfor(let j=0;j<k;j++) {\n\t\t// Custom, Multidimensional or unidimensional\n\t\tlet dist =\tfndist? fndist(point,ks[j]) :\n\t\t\t\t\t\t\t\tmulti? eudist(point,ks[j]) :\n\t\t\t\t\t\t\t\tMath.abs(point-ks[j]);\n\n\t\tif(dist<=min) {\n\t\t\tmin = dist;\n\t\t\tidx = j;\n\t\t}\n\t}\n\n\treturn {\n\t\tidx, centroid:ks[idx]\n\t}\n}\n\nfunction skmeans(data,k,initial,maxit,fndist,fixedclusters) {\n\t// fixedclusters looks like [0, 1, 0, 0, -1, -1, -1], e.g.,\n\t// to indicate that 0, 2, 3 should stay clustered and \n\t// 1 should stay clustered and the last three data points\n\t// should go in some cluster, either one of the first two\n\t// or a new one\n\tvar ks = [], old = [], idxs = [], dist = [];\n\tvar conv = false, it = maxit || MAX;\n\tvar len = data.length, vlen = data[0].length; \n\tvar count = [];\n\n\tif(!initial) {\n\t\tlet idxs = {}, z=0;\n\t\twhile(ks.length<k) {\n\t\t\tlet idx = Math.floor(Math.random()*len);\n\t\t\tif(!idxs[idx]) {\n\t\t\t\tidxs[idx] = true;\n\t\t\t\tks[z++] = data[idx];\n\t\t\t}\n\t\t}\n\t}\n\telse if(initial==\"kmrand\") {\n\t\tks = kmrand(data,k);\n\t}\n\telse if(initial==\"kmpp\") {\n\t\tks = kmpp(data,k,fndist);\n\t}\n\telse {\n\t\tks = initial;\n\t}\n\t\n\t// fix centers based on pre-specified clusters\n\tif(fixedclusters) {\n\t\t// assign the fixed points to their clusters, permanently\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tif (fixedclusters[i] != -1) {\n\t\t\t\tidxs[i] = fixedclusters[i]; \n\t\t\t}\n\t\t}\n\t\t\n\t\t// which clusters are fixed:\n\t\tvar fixedcluster_inds = [...new Set(fixedclusters)].sort().slice(1);\n\t\tvar fixedclusters_set = new Set(fixedcluster_inds);\n\t\t\n\t\t// set up zero vectors to store means\n\t\tvar sum = []; \n\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tsum[j] = init(vlen,0,sum[j]);\n\t\t}\n\n\t\t// Sum values and count for each centroid\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tif (fixedclusters[i] != -1) {\n\t\t\t\tlet\tidx = fixedclusters[i],\t\t// Centroid for that item\n\t\t\t\t\t\tvsum = sum[idx],\t// Sum values for this centroid\n\t\t\t\t\t\tvect = data[i];\t\t// Current vector\n\n\t\t\t\t// Accumulate value on the centroid for current vector\n\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\tvsum[h] += vect[h];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Calculate the average for each centroid\n\t\tconv = true;\n\t\tfor(let j=0;j<k;j++) {\n\t\t\tif (fixedclusters_set.has(j)) {\n\t\t\t\tlet ksj = ks[j],\t\t// Current centroid\n\t\t\t\t\t\tsumj = sum[j],\t// Accumulated centroid values\n\t\t\t\t\t\toldj = old[j], \t// Old centroid value\n\t\t\t\t\t\tcj = count[j];\t// Number of elements for this centroid\n\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\tksj[h] = (sumj[h])/(cj) || 0;\t// centroid\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tvar fixedclusters = init(len, -1);\n\t\tvar fixedcluster_inds = [];\n\t\tvar fixedclusters_set = new Set();\n\t}\n\n\tdo {\n\t\t// Reset k count\n\t\tinit(k,0,count);\n\n\t\t// For each non-fixed value in data, find the nearest centroid\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tlet min = Infinity, idx = 0;\n\t\t\tif (fixedclusters[i] == -1) { // -1 indicates a non-fixed point\n\t\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\t\tvar dist =\tfndist ? fndist(data[i],ks[j]) : eudist(data[i],ks[j]);\n\t\t\t\t\t\n\t\t\t\t\tif(dist<=min) {\n\t\t\t\t\t\tmin = dist;\n\t\t\t\t\t\tidx = j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tidx = fixedclusters[i]; \n\t\t\t}\n\t\t\tidxs[i] = idx;\t// Index of the selected centroid for that value\n\t\t\tcount[idx]++;\t\t// Number of values for this centroid\n\t\t}\n\n\t\t// Recalculate centroids\n\t\tvar sum = [], old = [], dif = 0;\n\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tsum[j] = init(vlen,0,sum[j]);\n\t\t\t\told[j] = ks[j];\n\t\t}\n\t\t\n\t\tfor(let j=0;j<k;j++) {\n\t\t\tif (!fixedclusters_set.has(j)) {\n\t\t\t\tks[j] = [];\n\t\t\t}\n\t\t}\n\n\t\t// Sum values and count for each centroid\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tlet\tidx = idxs[i],\t\t// Centroid for that item\n\t\t\t\t\tvsum = sum[idx],\t// Sum values for this centroid\n\t\t\t\t\tvect = data[i];\t\t// Current vector\n\n\t\t\t// Accumulate value on the centroid for current vector\n\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\tvsum[h] += vect[h];\n\t\t\t}\n\t\t}\n\t\t// Calculate the average for each centroid\n\t\tconv = true;\n\t\tfor(let j=0;j<k;j++) {\n\t\t\tlet ksj = ks[j],\t\t// Current centroid\n\t\t\t\t\tsumj = sum[j],\t// Accumulated centroid values\n\t\t\t\t\toldj = old[j], \t// Old centroid value\n\t\t\t\t\tcj = count[j];\t// Number of elements for this centroid\n\n\t\t\t// New average\n\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\tksj[h] = (sumj[h])/(cj) || 0;\t// New centroid\n\t\t\t}\n\n\t\t\t// Find if centroids have moved\n\t\t\tif(conv) {\n\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\tif(oldj[h]!=ksj[h]) {\n\t\t\t\t\t\tconv = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconv = conv || (--it<=0);\n\t} while(!conv);\n\n\treturn {\n\t\tit : (maxit || MAX) - it,\n\t\tk : k,\n\t\tidxs : idxs,\n\t\tcentroids : ks,\n\t\ttest : test\n\t};\n}\n\nmodule.exports = skmeans;\n"],"file":"main.js"}
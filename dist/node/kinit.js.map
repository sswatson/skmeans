{"version":3,"sources":["../../kinit.js"],"names":["Distance","require","eudist","dist","module","exports","kmrand","data","k","map","ks","t","len","length","multi","d","Math","floor","random","key","join","push","Error","kmpp","centroids","distance","filter","v","original_centroid_count","c","dists","lk","dsum","prs","i","min","Infinity","j","pr","cs","sort","a","b","rnd","idx","ctr"],"mappings":"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","sourcesContent":["const\n\tDistance = require(\"./distance.js\"),\n\teudist = Distance.eudist,\n\tdist = Distance.dist;\n\nmodule.exports = {\n\tkmrand(data,k) {\n\t\tvar map = {}, ks = [], t = k<<2;\n\t\tvar len = data.length;\n\t\tvar multi = data[0].length>0;\n\n\t\twhile(ks.length<k && (t--)>0) {\n\t\t\tlet d = data[Math.floor(Math.random()*len)];\n\t\t\tlet key = multi? d.join(\"_\") : `${d}`;\n\t\t\tif(!map[key]) {\n\t\t\t\tmap[key] = true;\n\t\t\t\tks.push(d);\n\t\t\t}\n\t\t}\n\n\t\tif(ks.length<k) throw new Error(\"Error initializating clusters\");\n\t\telse return ks;\n\t},\n\n\t/**\n\t * K-means++ initial centroid selection\n\t */\n\tkmpp(data,k,centroids) {\n\t\tvar distance = eudist;\n\t\tvar ks = centroids.filter(v=>v.length > 0), len = data.length;\n\t\tvar original_centroid_count = ks.length;\n\t\tvar map = {};\n\n\t\t// First random centroid, if we don't have any to begin with\n\t\tif (ks.length == 0) {\n\t\t\tvar c = data[Math.floor(Math.random()*len)];\n\t\t\tvar key = c.join(\"_\")\n\t\t\tks.push(c);\n\t\t\tmap[key] = true;\n\t\t}\n\n\t\t// Retrieve next centroids\n\t\twhile(ks.length<k) {\n\t\t\t// Min Distances between current centroids and data points\n\t\t\tlet dists = [], lk = ks.length;\n\t\t\tlet dsum = 0, prs = [];\n\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tlet min = Infinity;\n\t\t\t\tfor(let j=0;j<lk;j++) {\n\t\t\t\t\tlet dist = distance(data[i],ks[j]);\n\t\t\t\t\tif(dist<=min) min = dist;\n\t\t\t\t}\n\t\t\t\tdists[i] = min;\n\t\t\t}\n\n\t\t\t// Sum all min distances\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tdsum += dists[i]\n\t\t\t}\n\n\t\t\t// Probabilities and cummulative prob (cumsum)\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tprs[i] = {i:i, v:data[i],\tpr:dists[i]/dsum, cs:0}\n\t\t\t}\n\n\t\t\t// Sort Probabilities\n\t\t\tprs.sort((a,b)=>a.pr-b.pr);\n\n\t\t\t// Cummulative Probabilities\n\t\t\tprs[0].cs = prs[0].pr;\n\t\t\tfor(let i=1;i<len;i++) {\n\t\t\t\tprs[i].cs = prs[i-1].cs + prs[i].pr;\n\t\t\t}\n\n\t\t\t// Randomize\n\t\t\tlet rnd = Math.random();\n\n\t\t\t// Gets only the items whose cumsum >= rnd\n\t\t\tlet idx = 0;\n\t\t\twhile(idx<len-1 && prs[idx++].cs<rnd);\n\t\t\tks.push(prs[idx-1].v);\n\t\t}\n\n\t\tlet ctr = 0;\n\t\tfor (let j=0;j<centroids.length;j++) {\n\t\t\tif (centroids[j].length == 0) {\n\t\t\t\tcentroids[j] = ks[original_centroid_count + ctr]; \n\t\t\t\tctr++;\n\t\t\t}\n\t\t}\n\t\treturn centroids;\n\t}\n\n}\n"],"file":"kinit.js"}
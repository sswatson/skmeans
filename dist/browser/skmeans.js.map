{"version":3,"sources":["skmeans.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","module","root","previous_skmeans","skmeans","window","eudist","v1","v2","len","sum","d","mandist","dist","sqrt","Math","abs","Distance","kmrand","data","k","map","ks","multi","floor","random","key","join","push","kmpp","centroids","distance","filter","v","original_centroid_count","dists","lk","dsum","prs","min","Infinity","j","pr","cs","sort","b","rnd","idx","ctr","ClusterInit","absdist","MAX","fill","val","test","point","fndist","centroid","maxit","fixedclusters","old","idxs","conv","it","vlen","count","fixedcluster_inds","Set","slice","fixedclusters_set","vsum","vect","h","has","ksj","sumj","cj","oldj"],"mappings":"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","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\n(function() {\n  var root = this\n  var previous_skmeans = root.skmeans;\n\tvar skmeans = require('./main.js');\n\n\tif( typeof exports !== 'undefined' ) {\n    if( typeof module !== 'undefined' && module.exports ) {\n      exports = module.exports = skmeans;\n    }\n    exports.skmeans = skmeans;\n  }\n\n\tif(typeof window !== 'undefined') {\n    window.skmeans = skmeans;\n  }\n\n}).call(this);\n\n},{\"./main.js\":4}],2:[function(require,module,exports){\nmodule.exports = {\n\t/**\n\t * Euclidean distance\n\t */\n\teudist(v1,v2) {\n\t\tvar len = v1.length;\n\t\tvar sum = 0;\n\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tvar d = (v1[i]||0) - (v2[i]||0);\n\t\t\tsum += d*d;\n\t\t}\n\t\t// Square root not really needed\n\t\treturn sum;\n\t},\n\n\tmandist(v1,v2) {\n\t\tvar len = v1.length;\n\t\tvar sum = 0, d = 0;\n\n\t\tfor(let i=0;i<len;i++) {\n\t\t\td = (v1[i]||0) - (v2[i]||0);\n\t\t\tsum += (d>=0)? d : -d;\n\t\t}\n\n\t\treturn sum;\n\t},\n\n\t/**\n\t * Unidimensional distance\n\t */\n\tdist(v1,v2,sqrt) {\n\t\tvar d = Math.abs(v1-v2);\n\t\treturn sqrt? d : d*d;\n\t}\n\n}\n\n},{}],3:[function(require,module,exports){\nconst\n\tDistance = require(\"./distance.js\"),\n\teudist = Distance.eudist,\n\tdist = Distance.dist;\n\nmodule.exports = {\n\tkmrand(data,k) {\n\t\tvar map = {}, ks = [], t = k<<2;\n\t\tvar len = data.length;\n\t\tvar multi = data[0].length>0;\n\n\t\twhile(ks.length<k && (t--)>0) {\n\t\t\tlet d = data[Math.floor(Math.random()*len)];\n\t\t\tlet key = multi? d.join(\"_\") : `${d}`;\n\t\t\tif(!map[key]) {\n\t\t\t\tmap[key] = true;\n\t\t\t\tks.push(d);\n\t\t\t}\n\t\t}\n\n\t\tif(ks.length<k) throw new Error(\"Error initializating clusters\");\n\t\telse return ks;\n\t},\n\n\t/**\n\t * K-means++ initial centroid selection\n\t */\n\tkmpp(data,k,centroids) {\n\t\tvar distance = eudist;\n\t\tvar ks = centroids.filter(v=>v.length > 0), len = data.length;\n\t\tvar original_centroid_count = ks.length;\n\t\tvar map = {};\n\n\t\t// First random centroid, if we don't have any to begin with\n\t\tif (ks.length == 0) {\n\t\t\tvar c = data[Math.floor(Math.random()*len)];\n\t\t\tks.push(c);\n\t\t}\n\n\t\t// Retrieve next centroids\n\t\twhile(ks.length<k) {\n\t\t\t// Min Distances between current centroids and data points\n\t\t\tlet dists = [], lk = ks.length;\n\t\t\tlet dsum = 0, prs = [];\n\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tlet min = Infinity;\n\t\t\t\tfor(let j=0;j<lk;j++) {\n\t\t\t\t\tlet dist = distance(data[i],ks[j]);\n\t\t\t\t\tif(dist<=min) min = dist;\n\t\t\t\t}\n\t\t\t\tdists[i] = min;\n\t\t\t}\n\n\t\t\t// Sum all min distances\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tdsum += dists[i]\n\t\t\t}\n\n\t\t\t// Probabilities and cummulative prob (cumsum)\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tprs[i] = {i:i, v:data[i],\tpr:dists[i]/dsum, cs:0}\n\t\t\t}\n\n\t\t\t// Sort Probabilities\n\t\t\tprs.sort((a,b)=>a.pr-b.pr);\n\n\t\t\t// Cummulative Probabilities\n\t\t\tprs[0].cs = prs[0].pr;\n\t\t\tfor(let i=1;i<len;i++) {\n\t\t\t\tprs[i].cs = prs[i-1].cs + prs[i].pr;\n\t\t\t}\n\n\t\t\t// Randomize\n\t\t\tlet rnd = Math.random();\n\n\t\t\t// Gets only the items whose cumsum >= rnd\n\t\t\tlet idx = 0;\n\t\t\twhile(idx<len-1 && prs[idx++].cs<rnd);\n\t\t\tks.push(prs[idx-1].v);\n\t\t}\n\n\t\tlet ctr = 0;\n\t\tfor (let j=0;j<centroids.length;j++) {\n\t\t\tif (centroids[j].length == 0) {\n\t\t\t\tcentroids[j] = ks[original_centroid_count + ctr]; \n\t\t\t\tctr++;\n\t\t\t}\n\t\t}\n\t\treturn centroids;\n\t}\n\n}\n\n},{\"./distance.js\":2}],4:[function(require,module,exports){\n/*jshint esversion: 6 */\n\nconst\n\tDistance = require(\"./distance.js\"),\n\tClusterInit = require(\"./kinit.js\"),\n\teudist = Distance.eudist,\n\tmandist = Distance.mandist,\n\tabsdist = Distance.dist,\n\tkmrand = ClusterInit.kmrand,\n\tkmpp = ClusterInit.kmpp;\n\nconst MAX = 10000;\n\n/**\n * Inits an array with values\n */\nfunction fill(len,val,v) {\n\tv = v || [];\n\tfor(let i=0;i<len;i++) v[i] = val;\n\treturn v;\n}\n\nfunction test(point, fndist) {\n\tlet\n\t\tks = this.centroids,\n\t\tk = ks.length;\n\n\t// For each value in data, find the nearest centroid\n\tlet min = Infinity, idx = 0;\n\tfor(let j=0;j<k;j++) {\n\t\t// Custom, Multidimensional or unidimensional\n\t\tlet dist =\tfndist? fndist(point,ks[j]) : eudist(point,ks[j])\n\n\t\tif(dist<=min) {\n\t\t\tmin = dist;\n\t\t\tidx = j;\n\t\t}\n\t}\n\n\treturn {\n\t\tidx, centroid:ks[idx]\n\t}\n}\n\nfunction skmeans(data,k,maxit,fixedclusters) {\n\t// fixedclusters looks like [0, 1, 0, 0, -1, -1, -1], e.g.,\n\t// to indicate that 0, 2, 3 should stay clustered and \n\t// 1 should stay clustered and the last three data points\n\t// should go in some cluster, either one of the first two\n\t// or a new one\n\tvar ks = [], old = [], idxs = [], dist = [];\n\tvar conv = false, it = maxit || MAX;\n\tvar len = data.length, vlen = data[0].length; \n\tvar count = [];\n\t\n\tfor (let j=0;j<k;j++){\n\t\tks[j] = [];\n\t\tcount[j] = 0;\n\t}\n\t\n\t// fix centers based on pre-specified clusters\n\tif(fixedclusters) {\n\t\t\n\t\t// determine which clusters are fixed:\n\t\tvar fixedcluster_inds = [...new Set(fixedclusters)].sort().slice(1);\n\t\tvar fixedclusters_set = new Set(fixedcluster_inds);\n\t\t\n\t\t// set up zero vectors to store means\n\t\tvar sum = []; \n\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tsum[j] = fill(vlen,0,sum[j]);\n\t\t}\n\n\t\t// Sum, values, and count for each centroid\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tif (fixedclusters[i] != -1) {\n\t\t\t\tlet\tidx = fixedclusters[i],\t\t// Centroid for that item\n\t\t\t\t\t\tvsum = sum[idx],\t// Sum values for this centroid\n\t\t\t\t\t\tvect = data[i];\t\t// Current vector\n\n\t\t\t\t// Accumulate value on the centroid for current vector\n\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\tvsum[h] += vect[h];\n\t\t\t\t}\n\t\t\t\tcount[idx]++;\n\t\t\t}\n\t\t}\n\t\t// Calculate the average for each centroid\n\t\tfor(let j=0;j<k;j++) {\n\t\t\tif (fixedclusters_set.has(j)) {\n\t\t\t\tlet ksj = ks[j],\t\t// Current centroid\n\t\t\t\t\t\tsumj = sum[j],\t// Accumulated centroid values\n\t\t\t\t\t\tcj = count[j];\t// Number of elements for this centroid\n\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\tksj[h] = (sumj[h])/(cj) || 0;\t// centroid\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tvar fixedclusters = fill(len, -1);\n\t\tvar fixedcluster_inds = [];\n\t\tvar fixedclusters_set = new Set();\n\t}\n\t\n\t// Choose initial points for the free clusters in a smart way\n\tkmpp(data, k, ks);\n\n\tdo {\n\t\t// Reset count\n\t\tfill(k,0,count);\n\n\t\t// For each non-fixed value in data, find the nearest centroid\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tlet min = Infinity, idx = 0;\n\t\t\tif (fixedclusters[i] == -1) { // -1 indicates a non-fixed point\n\t\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\t\tvar dist = eudist(data[i],ks[j]);\n\t\t\t\t\t\n\t\t\t\t\tif(dist<=min) {\n\t\t\t\t\t\tmin = dist;\n\t\t\t\t\t\tidx = j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tidx = fixedclusters[i]; \n\t\t\t}\n\t\t\tidxs[i] = idx;\t// Index of the selected centroid for that value\n\t\t\tcount[idx]++;\t\t// Number of values for this centroid\n\t\t}\t\t\n\n\t\t// Recalculate centroids\n\t\tvar sum = [], old = [];\n\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tsum[j] = fill(vlen,0,sum[j]);\n\t\t\t\told[j] = ks[j];\n\t\t}\n\t\t\n\t\tfor(let j=0;j<k;j++) {\n\t\t\tif (!fixedclusters_set.has(j)) {\n\t\t\t\tks[j] = [];\n\t\t\t}\n\t\t}\n\n\t\t// Sum values and count for each centroid\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tlet\tidx = idxs[i],\t\t// Centroid for that item\n\t\t\t\t\tvsum = sum[idx],\t// Sum values for this centroid\n\t\t\t\t\tvect = data[i];\t\t// Current vector\n\n\t\t\t// Accumulate value on the centroid for current vector\n\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\tvsum[h] += vect[h];\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Calculate the average for each centroid\n\t\tconv = true;\n\t\tfor(let j=0;j<k;j++) {\n\t\t\tif (!fixedclusters_set.has(j)) {\n\t\t\t\tlet ksj = ks[j],\t\t// Current centroid\n\t\t\t\t\t\tsumj = sum[j],\t// Accumulated centroid values\n\t\t\t\t\t\toldj = old[j], \t// Old centroid value\n\t\t\t\t\t\tcj = count[j];\t// Number of elements for this centroid\n\t\t\t\t// New average\n\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\tksj[h] = (sumj[h])/(cj) || 0;\t// New centroid\n\t\t\t\t}\n\t\t\t\t// Determine whether centroids have moved\n\t\t\t\tif(conv) {\n\t\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\t\tif(oldj[h]!=ksj[h]) {\n\t\t\t\t\t\t\tconv = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconv = conv || (--it<=0);\n\t} while(!conv);\n\n\treturn {\n\t\tit : (maxit || MAX) - it,\n\t\tk : k,\n\t\tidxs : idxs,\n\t\tcentroids : ks,\n\t\ttest : test\n\t};\n}\n\nmodule.exports = skmeans;\n\n},{\"./distance.js\":2,\"./kinit.js\":3}]},{},[1]);\n"],"file":"skmeans.js"}